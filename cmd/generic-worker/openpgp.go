package main

import (
	"fmt"
	"os"

	"golang.org/x/crypto/openpgp"
	"golang.org/x/crypto/openpgp/armor"
	"golang.org/x/crypto/openpgp/packet"
)

func generateOpenPGPKeypair(privateKeyFile string) error {
	entity, err := openpgp.NewEntity(
		"Generic-Worker", // `Name-Real`
		"",               // `Comment`
		"taskcluster-accounts+gpgsigning@mozilla.com", // `Name-Email`
		&packet.Config{
			RSABits: 4096,
		},
	)
	if err != nil {
		return err
	}
	err = writePrivateKeyToFile(entity, privateKeyFile)
	if err != nil {
		return err
	}
	err = writePublicKeyToLog(entity)
	if err != nil {
		return err
	}
	return nil
}

func writePublicKeyToLog(entity *openpgp.Entity) error {
	w, err := armor.Encode(
		os.Stdout,
		openpgp.PublicKeyType,
		map[string]string{
			"Comment": "Key pair generated by generic worker",
		},
	)
	if err != nil {
		return err
	}
	defer func() {
		w.Close()
		fmt.Println()
	}()
	err = entity.Serialize(w)
	if err != nil {
		return err
	}
	return nil
}

func writePrivateKeyToFile(entity *openpgp.Entity, privateKeyFile string) error {
	privKey, err := os.OpenFile(privateKeyFile, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0400)
	if err != nil {
		return err
	}
	w, err := armor.Encode(
		privKey,
		openpgp.PrivateKeyType,
		map[string]string{
			"Comment": "Key pair generated by generic worker",
		},
	)
	if err != nil {
		return err
	}
	defer func() {
		w.Close()
		fmt.Fprintln(privKey)
		privKey.Close()
	}()
	err = entity.SerializePrivate(w, nil)
	if err != nil {
		return err
	}
	return nil
}
