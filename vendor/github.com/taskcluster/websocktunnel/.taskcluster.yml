version: 1
policy:
  pullRequests: public
tasks:
  - $if: '(tasks_for == "github-pull-request"  && event["action"] in ["opened", "reopened", "synchronize"])'
    then:
      taskId: {$eval: as_slugid("test")}
      created: {$fromNow: ''}
      deadline: {$fromNow: '2 hours'}
      provisionerId: aws-provisioner-v1
      workerType: github-worker
      payload:
        maxRunTime: 3600
        image: golang
        command:
          - /bin/bash
          - '-c'
          - >-
            mkdir -p /go/src/github.com/taskcluster &&
            cd /go/src/github.com/taskcluster &&
            git clone ${event.pull_request.head.repo.git_url} websocktunnel &&
            cd websocktunnel &&
            git config advice.detachedHead false &&
            git checkout ${event.pull_request.head.sha} &&
            go test -v -race ./...
      metadata:
        name: websocktunnel-tests
        description: runs tests for websocktunnel components
        owner: ${event.pull_request.user.login}@users.noreply.github.com
        source: ${event.repository.url}

  - $if: '(tasks_for == "github-pull-request"  && event["action"] in ["opened", "reopened", "synchronize"])'
    then:
      taskId: {$eval: as_slugid("dep")}
      created: {$fromNow: ''}
      deadline: {$fromNow: '2 hours'}
      provisionerId: aws-provisioner-v1
      workerType: github-worker
      payload:
        maxRunTime: 3600
        image: golang
        command:
          - /bin/bash
          - '-c'
          - >-
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh &&
            mkdir -p /go/src/github.com/taskcluster &&
            cd /go/src/github.com/taskcluster &&
            git clone ${event.pull_request.head.repo.git_url} websocktunnel &&
            cd websocktunnel &&
            git config advice.detachedHead false &&
            git checkout ${event.pull_request.head.sha} &&
            dep check
      metadata:
        name: websocktunnel-dep
        description: check dep for websocktunnel
        owner: ${event.pull_request.user.login}@users.noreply.github.com
        source: ${event.repository.url}

  - $if: '(tasks_for == "github-pull-request"  && event["action"] in ["opened", "reopened", "synchronize"])'
    then:
      taskId: {$eval: as_slugid("lint")}
      created: {$fromNow: ''}
      deadline: {$fromNow: '2 hours'}
      provisionerId: aws-provisioner-v1
      workerType: github-worker
      payload:
        maxRunTime: 3600
        image: golang:1.10
        command:
          - /bin/bash
          - '-c'
          - >-
            curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $GOPATH/bin v1.12.3 &&
            mkdir -p /go/src/github.com/taskcluster &&
            cd /go/src/github.com/taskcluster &&
            git clone ${event.pull_request.head.repo.git_url} websocktunnel &&
            cd websocktunnel &&
            git config advice.detachedHead false &&
            git checkout ${event.pull_request.head.sha} &&
            golangci-lint run
      metadata:
        name: websocktunnel-lint
        description: check lint for websocktunnel
        owner: ${event.pull_request.user.login}@users.noreply.github.com
        source: ${event.repository.url}

  - $if: 'tasks_for == "github-push"'
    then:
      taskId: {$eval: as_slugid("all")}
      created: {$fromNow: ''}
      deadline: {$fromNow: '2 hours'}
      provisionerId: aws-provisioner-v1
      workerType: github-worker
      payload:
        maxRunTime: 3600
        image: golang:1.10
        command:
          - /bin/bash
          - '-c'
          - >-
            curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $GOPATH/bin v1.12.3 &&
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh &&
            mkdir -p /go/src/github.com/taskcluster &&
            cd /go/src/github.com/taskcluster &&
            git clone ${event.repository.url} websocktunnel &&
            cd websocktunnel &&
            git config advice.detachedHead false &&
            git checkout ${event.after} &&
            dep check &&
            golangci-lint run &&
            go test -v -race ./...
      metadata:
        name: websocktunnel-everything
        description: all checks for websocktunnel
        owner: ${event.pusher.name}@users.noreply.github.com
        source: ${event.repository.url}
